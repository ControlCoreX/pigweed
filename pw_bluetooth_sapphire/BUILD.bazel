# Copyright 2023 The Pigweed Authors
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

load("@rules_python//sphinxdocs:sphinx_docs_library.bzl", "sphinx_docs_library")
load("//pw_build:compatibility.bzl", "incompatible_with_mcu")
load("//pw_unit_test:pw_cc_test.bzl", "pw_cc_test")

package(default_visibility = ["//pw_bluetooth_sapphire:__subpackages__"])

cc_library(
    name = "config",
    srcs = [],
    defines = select({
        "@platforms//os:fuchsia": [
            "PW_BLUETOOTH_SAPPHIRE_INSPECT_ENABLED",
            "PW_BLUETOOTH_SAPPHIRE_TRACE_ENABLED",
        ],
        "//conditions:default": [],
    }),
)

cc_library(
    name = "public",
    hdrs = [
        "public/pw_bluetooth_sapphire/config.h",
    ],
    strip_include_prefix = "public",
    tags = ["manual"],
)

cc_library(
    name = "peripheral",
    srcs = ["peripheral.cc"],
    hdrs = ["public/pw_bluetooth_sapphire/peripheral.h"],
    includes = ["public"],
    deps = [
        "//pw_bluetooth:pw_bluetooth2",
        "//pw_bluetooth_sapphire/host/gap",
        "//pw_sync:mutex",
    ],
)

pw_cc_test(
    name = "peripheral_test",
    srcs = ["peripheral_test.cc"],
    test_main = "//pw_bluetooth_sapphire/host/testing:gtest_main",
    deps = [
        ":peripheral",
        "//pw_async:fake_dispatcher",
        "//pw_async2:pend_func_task",
        "//pw_bluetooth_sapphire/host/gap:testing",
    ],
)

sphinx_docs_library(
    name = "docs",
    srcs = [
        "docs.rst",
        "fuchsia.rst",
    ],
    prefix = "pw_bluetooth_sapphire/",
    target_compatible_with = incompatible_with_mcu(),
    visibility = ["//visibility:public"],
)
