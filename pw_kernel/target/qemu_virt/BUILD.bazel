# Copyright 2025 The Pigweed Authors
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

load("@rules_rust//rust:defs.bzl", "rust_binary", "rust_library")
load("//pw_build:merge_flags.bzl", "flags_from_dict")
load("//pw_build:pw_linker_script.bzl", "pw_linker_script")

platform(
    name = "riscv32imc",
    constraint_values = [
        "//pw_build/constraints/riscv/extensions:I",
        "//pw_build/constraints/riscv/extensions:M",
        "//pw_build/constraints/riscv/extensions:C",
        "@platforms//cpu:riscv32",
        "@platforms//os:none",
        "@rust_crates//:no_std",
    ],
    flags = flags_from_dict({
        "//pw_kernel/config:kernel_config": ":config_riscv",
        "//pw_kernel/lib/unittest:unittest_runner": ":unittest_runner",
        "//pw_kernel/subsys/console:console_backend": ":console_riscv",
        "//pw_kernel/target:linker_script": ":linker_script_riscv",
        "//pw_kernel/target:target": ":target_riscv",
    }),
)

pw_linker_script(
    name = "linker_script_riscv",
    linker_script = "riscv.ld",
    target_compatible_with = [
        "@platforms//cpu:riscv32",
    ],
)

rust_library(
    name = "console_riscv",
    srcs = ["console_riscv.rs"],
    crate_name = "console_backend",
    tags = ["kernel"],
    target_compatible_with = [
        "@platforms//cpu:riscv32",
    ],
    deps = [
        "//pw_kernel/kernel",
        "//pw_kernel/lib/pw_status",
        "@rust_crates//:embedded-io",
    ],
)

SRCS = ["target_riscv.rs"]

TARGET_COMPATIBLE_WITH = [
    "@platforms//cpu:riscv32",
]

COMMON_DEPS = [
    ":console_riscv",
    ":linker_script_riscv",
    "//pw_kernel/kernel",
    "//pw_kernel/target:demo",
    "//pw_kernel/target:target_common",
    "@rust_crates//:panic-halt",
    "@rust_crates//:riscv",
    "@rust_crates//:riscv-rt",
]

rust_binary(
    name = "target_riscv",
    srcs = SRCS,
    edition = "2021",
    tags = ["kernel"],
    target_compatible_with = TARGET_COMPATIBLE_WITH,
    deps = COMMON_DEPS,
)

# When building as a unit test runner, this target will be depended upon by
# other libraries (in other words, it won't be the root of the dependency
# graph). Declaring this as a `rust_binary` would result in it being built, but
# not linked against the other libraries in the build graph.
rust_library(
    name = "unittest_runner",
    srcs = SRCS,
    crate_features = ["test"],
    crate_name = "unittest_runner",
    edition = "2021",
    tags = ["kernel"],
    target_compatible_with = TARGET_COMPATIBLE_WITH,
    deps = COMMON_DEPS + [
        "//pw_kernel/lib/unittest:unittest_core",
        "@pigweed//pw_log/rust:pw_log",
        "@rust_crates//:riscv-semihosting",
    ],
)

rust_library(
    name = "config_riscv",
    srcs = ["config_riscv.rs"],
    crate_name = "kernel_config",
    target_compatible_with = TARGET_COMPATIBLE_WITH,
    deps = [
        "//pw_kernel/config:kernel_config_interface",
    ],
)
